/*
 * This file is generated by jOOQ.
 */
package br.com.renanschmitt.medium.db.tables.daos;

import br.com.renanschmitt.medium.db.AbstractSpringDAOImpl;
import br.com.renanschmitt.medium.db.tables.Persons;
import br.com.renanschmitt.medium.db.tables.pojos.PersonsPojo;
import br.com.renanschmitt.medium.db.tables.records.PersonsRecord;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
@Repository
public class PersonsDao extends AbstractSpringDAOImpl<PersonsRecord, PersonsPojo, Long> {

  /** Create a new PersonsDao without any configuration */
  public PersonsDao() {
    super(Persons.PERSONS, PersonsPojo.class);
  }

  /** Create a new PersonsDao with an attached configuration */
  @Autowired
  public PersonsDao(Configuration configuration) {
    super(Persons.PERSONS, PersonsPojo.class, configuration);
  }

  @Override
  public Long getId(PersonsPojo object) {
    return object.getId();
  }

  /**
   * Fetch records that have <code>id BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  public List<PersonsPojo> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
    return fetchRange(Persons.PERSONS.ID, lowerInclusive, upperInclusive);
  }

  /** Fetch records that have <code>id IN (values)</code> */
  public List<PersonsPojo> fetchById(Long... values) {
    return fetch(Persons.PERSONS.ID, values);
  }

  /** Fetch a unique record that has <code>id = value</code> */
  public PersonsPojo fetchOneById(Long value) {
    return fetchOne(Persons.PERSONS.ID, value);
  }

  /** Fetch a unique record that has <code>id = value</code> */
  public Optional<PersonsPojo> fetchOptionalById(Long value) {
    return fetchOptional(Persons.PERSONS.ID, value);
  }

  /**
   * Fetch records that have <code>name BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  public List<PersonsPojo> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
    return fetchRange(Persons.PERSONS.NAME, lowerInclusive, upperInclusive);
  }

  /** Fetch records that have <code>name IN (values)</code> */
  public List<PersonsPojo> fetchByName(String... values) {
    return fetch(Persons.PERSONS.NAME, values);
  }

  /**
   * Fetch records that have <code>birth_date BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  public List<PersonsPojo> fetchRangeOfBirthDate(
      LocalDate lowerInclusive, LocalDate upperInclusive) {
    return fetchRange(Persons.PERSONS.BIRTH_DATE, lowerInclusive, upperInclusive);
  }

  /** Fetch records that have <code>birth_date IN (values)</code> */
  public List<PersonsPojo> fetchByBirthDate(LocalDate... values) {
    return fetch(Persons.PERSONS.BIRTH_DATE, values);
  }
}
